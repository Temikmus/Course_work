from fastapi import APIRouter, Depends, Query, WebSocket, WebSocketDisconnect, HTTPException
from sqlalchemy.orm import Session
from database import SessionLocal, get_db
from models import Vacancy
import sql_fucntions  # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ç–≤–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏

router = APIRouter()



@router.get("/chart/")
def get_chart_data(
        chart_type: str = Query(..., description="–¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞ (bar, line, pie –∏ —Ç. –¥.)"),
        x_axis: str = Query(..., description="–ü–æ–ª–µ –¥–ª—è –æ—Å–∏ X"),
        y_axis: str = Query(None, description="–ü–æ–ª–µ –¥–ª—è –æ—Å–∏ Y (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è bar/pie, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è heatmap)"),
        interval: str = Query(None, description="–ò–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏ (day, week, month, year)"),
        group_by: str = Query(None, description="–ü–æ–ª–µ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏"),
        filters: str = Query(None, description="–§–∏–ª—å—Ç—Ä—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö"),
        aggregates: str = Query(None, description="–ê–≥—Ä–µ–≥–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'salary_from:AVG,salary_to:SUM')"),
        having: str = Query(None, description="–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∞–≥—Ä–µ–≥–∞—Ç–æ–≤"),
        not_null: str = Query(None, description="–£–¥–∞–ª—è–µ—Ç NULL –∑–Ω–∞—á–µ–Ω–∏—è"),
        #limit: int = Query(100, ge=1, le=1000, description="–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∫–∏"),
        db: Session = Depends(get_db),
):
    query = db.query(Vacancy)

    # üîπ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è (–æ–±—ã—á–Ω—ã–µ –∏ –º–∞—Å—Å–∏–≤—ã)
    if filters:
        tuple_of_filters = sql_fucntions.parse_filters(filters)
        for column, value in tuple_of_filters.items():
            query = sql_fucntions.apply_filter_for_column(query, column, value[1], value[0], value[2], Vacancy)

    # üîπ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å—å X
    x_col = getattr(Vacancy, x_axis, None)
    if not x_col:
        raise HTTPException(status_code=400, detail=f"–ü–æ–ª–µ '{x_axis}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –æ—Å–∏ X")

    # üîπ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å—å Y
    y_col = None
    if y_axis:
        y_col = getattr(Vacancy, y_axis, None)
        if not y_col:
            raise HTTPException(status_code=400, detail=f"–ü–æ–ª–µ '{y_axis}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –æ—Å–∏ Y")

    # üîπ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    grouped_column = None
    if interval:
        query, grouped_column = sql_fucntions.apply_time_interval_grouping(query, x_axis, interval, Vacancy)

    # üîπ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ (–≤–∫–ª—é—á–∞—è –∏–Ω—Ç–µ—Ä–≤–∞–ª, –µ—Å–ª–∏ –µ—Å—Ç—å)
    group_columns = sql_fucntions.find_group_columns(group_by, Vacancy)
    if grouped_column:
        group_columns.append(grouped_column)

    # üîπ –ê–≥—Ä–µ–≥–∞—Ç—ã
    selected_aggregates = sql_fucntions.find_aggregate_columns_for_group_by(aggregates, Vacancy)

    # üîπ –ü—Ä–∏–º–µ–Ω—è–µ–º HAVING (—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∞–≥—Ä–µ–≥–∞—Ç–æ–≤)
    query = sql_fucntions.apply_having(query, having, selected_aggregates, Vacancy)

    # üîπ –ü—Ä–∏–º–µ–Ω—è–µ–º NOT NULL (—É–¥–∞–ª—è–µ–º NULL-–∑–Ω–∞—á–µ–Ω–∏—è)
    query = sql_fucntions.apply_not_null_for_columns(query, not_null, Vacancy)

    # üîπ –ü—Ä–∏–º–µ–Ω—è–µ–º GROUP BY –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    query = sql_fucntions.apply_group_by(query, group_columns, selected_aggregates)

    # üîπ –õ–∏–º–∏—Ç –≤—ã–±–æ—Ä–∫–∏ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫)
    #query = query.limit(limit)

    # üîπ –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    results = query.all()

    # üîπ –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
    return sql_fucntions.generate_chart_data_structure(results, x_axis, y_axis, chart_type)



# üîπ WebSocket –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
@router.websocket("/ws/chart/")
async def websocket_endpoint(websocket: WebSocket):
    await websocket.accept()
    try:
        while True:
            data = await websocket.receive_text()
            await websocket.send_text(f"–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")
    except WebSocketDisconnect:
        print("–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è")
